#test print upvar in shift
reset('a) {
    (fn(value) {
        shift('a) k {
            print(value);
        }
    })(5)
}
#output
5

#test return upvar in shift
reset('a) {
    (fn(value) {
        shift('a) k {
            k(value)
        }
    })(5)
}
#result
5

#test no args reset
reset {  }
#bind
RESET:
    SYMBOLS:
    LAMBDA:
        LAMBDA:
            NUM-ARGS:
                0
            NUM-UPVARS:
                0
            NUM-DECLARATIONS:
                0
            ARGS:
            BODY:
                BLOCK-STATEMENT:
            BINDINGS:
#result
nil

#test no args reset with value
reset { 5 }
#bind
RESET:
    SYMBOLS:
    LAMBDA:
        LAMBDA:
            NUM-ARGS:
                0
            NUM-UPVARS:
                0
            NUM-DECLARATIONS:
                0
            ARGS:
            BODY:
                BLOCK-EXPRESSION:
                    LITERAL:
                        5
            BINDINGS:
#result
5

#test one arg reset no body
reset('a) {}
#bind
RESET:
    SYMBOLS:
        LITERAL:
            'a
    LAMBDA:
        LAMBDA:
            NUM-ARGS:
                0
            NUM-UPVARS:
                0
            NUM-DECLARATIONS:
                0
            ARGS:
            BODY:
                BLOCK-STATEMENT:
            BINDINGS:
#result
nil

#test reset and shift
print(1);
reset('a) {
    print(2);
    shift('a) k { "done" };
    print(3);
}
#bind
FN-CALL:
    RECEIVER:
        SYMBOL:
            NAME:
                print
            SOURCE:
                GLOBAL:
                    print
    ARGS:
        LITERAL:
            1
RESET:
    SYMBOLS:
        LITERAL:
            'a
    LAMBDA:
        LAMBDA:
            NUM-ARGS:
                0
            NUM-UPVARS:
                0
            NUM-DECLARATIONS:
                0
            ARGS:
            BODY:
                BLOCK-STATEMENT:
                    FN-CALL:
                        RECEIVER:
                            SYMBOL:
                                NAME:
                                    print
                                SOURCE:
                                    GLOBAL:
                                        print
                        ARGS:
                            LITERAL:
                                2
                    SHIFT:
                        SYMBOLS:
                            LITERAL:
                                'a
                        LAMBDA:
                            LAMBDA:
                                NUM-ARGS:
                                    1
                                NUM-UPVARS:
                                    0
                                NUM-DECLARATIONS:
                                    0
                                ARGS:
                                    k
                                BODY:
                                    BLOCK-EXPRESSION:
                                        LITERAL:
                                            "done"
                                BINDINGS:
                                    BINDING:
                                        SYMBOL:
                                            k
                                        SOURCE:
                                            ARG:
                                                0
                    FN-CALL:
                        RECEIVER:
                            SYMBOL:
                                NAME:
                                    print
                                SOURCE:
                                    GLOBAL:
                                        print
                        ARGS:
                            LITERAL:
                                3
            BINDINGS:
#output
1
2
#result
done

#test nested resets
reset ('a) {
    reset('b) {
        10
    }
}
#result
10

#test nested resets with shift
print(1);
reset ('a) {
    print(2);
    reset('b) {
        print(3);
        shift('a) k { "done" };
        print(4);
    };
    print(5);
}
#output
1
2
3
#result
done

#test nested resets with shift 2
print(1);
reset ('a) {
    print(2);
    reset('b) {
        print(3);
        shift('b) k { "done" };
        print(4);
    };
    print(5);
    shift('a) k {
        "inner"
    };
    print(4);
    "outer"
}
#output
1
2
3
5
#result
inner

#test nested shifts
print(1);
reset('a) {
    print(2);
    reset('b) {
        print(3);
        shift('b) k {
            print(4);
            shift('a) c {
                print(5);
                "inside"
            };
            print(5);
        };
        print(6);
    };
    print(7);
};
#output
1
2
3
4
5
#result
inside

#test resume 1
var x = reset('a) {
    print(1);
    shift('a) k { k };
    print(2);
};
print("inbetween");
x();
#output
1
inbetween
2

#test resume 2
var x = reset('a) {
    print(1);
    shift('a) k { k };
    print(2);
    shift('a) k { k };
    print(3);
};
print("inbetween");
var c = x();
print("inbetween");
c();
#output
1
inbetween
2
inbetween
3

#test pauses
var pause = fn() {
    print("paused");
    shift('a) k { k };
};

var k = reset('a) {
    print(1);
    pause();
    print(2);
    pause();
    print(3);
    "done"
};

var g = k();
var h = g();
h
#output
1
paused
2
paused
3
#result
done

#test resume with value
var k = reset('a) {
    var a = shift('a) k { k };
    var b = shift('a) k { k };
    a + b
};
print(k(1)(2));
#output
3

#test stack messiness
1 + (reset('a) { shift('a) k { k } })(3)
#result
4

#test shift internal
reset('a) {
    shift('a) k {
        k()
    };
    5
}
#result
5

#test multiple-shift internal
reset('a) {
    shift('a) k {
        k();
        k();
    };
    print("hello");
}
#output
hello
hello

#test external resume
var k = 0;
reset('a) {
    shift('a) c {
        k = c;
    };
    print("resumed");
};
k();
k();
#output
resumed
resumed

#test generator
var done = nil;
done = fn() {
  [nil, done]
};

var generator = fn(f) {
  var thunk = fn() {
    reset('generator) {
      f();
      done()
    }
  };

  fn () {
    var cont = thunk();

    var ret = cont[0];
    var next = cont[1];

    thunk = next;
    ret
  }
};

var yield = fn(value) {
  shift('generator) k {
    [value, k]
  }
};

var f = fn() {
   yield(3);
   yield(4);
};

var g = generator(fn() {
  yield(1);
  yield(2);
  f();
  yield(5);
});

print(g());
print(g());
print(g());
print(g());
print(g());
#output
1
2
3
4
5

#test delimited cons
var cons = fn(a, b) {
	[a, b]
};

var yield = fn(v) {
    shift('a) k {
		cons(v, k())
    }
};

reset('a) {
    yield(1);
    yield(2);
    yield(3);
    yield(4);
    nil
}
#result
[1, [2, [3, [4, nil]]]]

#test recursive continuation call
10 + (reset('a) {
	2 + (shift('a) k {
		100 + k(k(3))
    })
})
#result
117

#test multi-resume
var run_the_rest_twice = fn() {
	shift('a) k {
		k();
		k();
	}
};

reset('a) {
	run_the_rest_twice();
	print("hello");
};
#output
hello
hello

#test basic exceptions
var try = fn(f, h) {
    var result = nil;
    
    var status = reset('exception) {
        result = f();
        'ok
    };

    if status == 'ok then {
        result
    } else {
        h(status)
    }
};

var throw = fn(excpt) {
    shift('exception) k {
        excpt
    }
};

var r = try(fn() {
    print(1);
    throw(5);
    print(2);
}, fn(e) {
    print("exception");
    print(e);
});
#output
1
exception
5

#test resumable exceptions
var try = fn(f, h) {
    var result = nil;
    
    var status = reset('exception) {
        result = f();
        'ok
    };

    var check = nil;
    check = fn() {
        if status == 'ok then {
            result
        } else {
            h(status[0], fn(v) {
                status = status[1](v);
                check()
            })
        }
    };
    check()
};



var throw = fn(excpt) {
    shift('exception) k {
        [excpt, k]
    }
};

var r = try(fn() {
    print(1);
    print(throw("MY EXCEPTION"));
    print(2);
}, fn(error, resume_with) {
    print("got exception");
    print(error);
    resume_with("HANDLE");
});
#output
1
got exception
MY EXCEPTION
HANDLE
2
