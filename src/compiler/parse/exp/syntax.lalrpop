use std::str::FromStr;
use super::{Ast, Span};
use std::boxed::Box;
use typed_arena::Arena;
use vm::{SymbolIntern, Symbol};

grammar<'a>(arena: &'a Arena<Ast<'a>>, interner: &mut SymbolIntern)["LALR(1)"];

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e { 
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Expr: Ast<'input> = {
    <ll: @L> <l:Expr> "+" <r:Factor> <rr: @R> =>
        Ast::Add(Box::new(l), Box::new(r), Span(ll, rr)),
    <ll: @L> <l:Expr> "-" <r:Factor> <rr: @R> =>
        Ast::Sub(Box::new(l), Box::new(r)),
    Factor,
    Closure,
    FunctionCall,
};

Factor: Ast<'input> = {
    <ll: @L> <l:Factor> "*" <r:Term> <rr: @R> =>
        Ast::Mul(arena.alloc(l), arena.alloc(r), Span(ll, rr)),
    <ll: @L> <l:Factor> "/" <r:Term> <rr: @R> =>
        Ast::Div(arena.alloc(l), arena.alloc(r), Span(ll, rr)),
    Reserved,
};

Reserved: Ast<'input> = {
    Term,
};

Term: Ast<'input> = {
    FloatLit,
    IntLit,
    StringLit,
    SymbolLit,
    <l: @L> Identifier <r: @R> => Ast::Identifier(<>, Span(l, r)),
    "(" <Expr> ")" 
};

Closure: Ast<'input> = {
    <l: @L> "fn" <name: Identifier?> <p_list: ParamList+> "{" "}" <r: @R> =>
        Ast::Closure(name, p_list, vec![], Span(l, r)),

};

ParamList: Vec<Ident<'input>> = {
    "(" <params: Comma<Identifier>> ")" => params,
};

FunctionCall: Ast<'input> = {
    <l: @L> <recv: Expr> "(" <args: Comma<Expr>> ")" <r: @R> =>
    Ast::FnCall(Box::new(recv), args, Span(l, r)),
};

IntLit: Ast<'input> = {
    <l: @L> <int: r"[0-9]+"> <r: @R> =>
        Ast::IntLit(i64::from_str(int).unwrap(), Span(l, r))
};

FloatLit: Ast<'input> = {
    <l: @L> <float: r"[0-9]+\.[0-9]*"> <r: @R> =>
        Ast::FloatLit(f64::from_str(float).unwrap(), Span(l, r))
};

StringLit: Ast<'input> = {
    <l: @L> <string: r##""(\\.|[^"])*""##> <r: @R> =>
        Ast::StringLit(string[1 .. string.len() - 1].into(), Span(l, r))
};

SymbolLit: Ast<'input> = {
   <l: @L> <symbol: r"'[_a-zA-Z][_a-zA-Z0-9]*"> <r: @R> =>
       Ast::SymbolLit(interner.intern(&symbol[1..]), Span(l, r))
};

Identifier: Symbol = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => interner.intern(<>)
};
